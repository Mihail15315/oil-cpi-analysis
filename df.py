import os
from pandas_datareader import data as fred
from config import FRED_API_KEY
import streamlit as st
import seaborn as sns  
from PyQt5 import QtCore
try:
    qt_plugin_path = os.path.join(os.path.dirname(QtCore.__file__), "Qt", "plugins")
    os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = qt_plugin_path
except ImportError:
    print("PyQt5 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≥—Ä–∞—Ñ–∏–∫–∏ –º–æ–≥—É—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è")
from fpdf import FPDF
from datetime import datetime
from fredapi import Fred
import pandas as pd
import matplotlib.pyplot as plt
from scipy import stats
import tempfile
fred = Fred(api_key=FRED_API_KEY)
class UnicodePDF(FPDF):
    def __init__(self):
        super().__init__()
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∏ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç—ã
            self.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
            self.add_font('DejaVu', 'B', 'DejaVuSans-Bold.ttf', uni=True)
            self.set_font('DejaVu', '', 12)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã, –µ—Å–ª–∏ DejaVu –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            self.set_font('Arial', '', 12)
    
    def safe_text(self, text):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            return text.encode('latin1', 'replace').decode('latin1')
        except:
            return text.encode('utf-8', 'replace').decode('utf-8')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Streamlit
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ –Ω–µ—Ñ—Ç–∏ –∏ CPI")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –Ω–µ—Ñ—Ç–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–Ω (CPI)")
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    start_date = '1986-01-01'
    cpi = fred.get_series('CPIAUCSL', observation_start=start_date)
    oil = fred.get_series('DCOILWTICO', observation_start=start_date)
    oil_monthly = oil.resample('ME').mean()
    
    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    cpi.index = cpi.index.to_period('M').to_timestamp('M')
    oil_monthly.index = oil_monthly.index.to_period('M').to_timestamp('M')
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    df = pd.DataFrame({'CPI': cpi, 'Oil': oil_monthly}).dropna()
    return df

df = load_data()

# –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
start_date = st.sidebar.date_input(
    "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", 
    value=pd.to_datetime('1986-01-01'),
    min_value=pd.to_datetime('1980-01-01'),
    max_value=pd.to_datetime('2023-12-31')
)

max_lag = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∞–≥ (–º–µ—Å—è—Ü—ã)", 1, 12, 3)
confidence_level = st.sidebar.slider("–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (%)", 90, 99, 95)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
df_filtered = df[df.index >= pd.to_datetime(start_date)]

# –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
cpi_changes = df_filtered['CPI'].pct_change().dropna()
oil_changes = df_filtered['Oil'].pct_change().dropna()

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
if len(cpi_changes) >= 2 and len(oil_changes) >= 2:
    corr, p_value = stats.pearsonr(cpi_changes, oil_changes)
    r_squared = corr**2
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (R)", f"{corr:.2f}")
    with col2:
        st.metric("R¬≤", f"{r_squared:.2f}")
    with col3:
        st.metric("p-value", f"{p_value:.3f}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def create_plots():
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    fig1, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
    df_filtered.plot(ax=ax1, title='CPI –∏ –Ω–µ—Ñ—Ç—å (–Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)')
    df_filtered.pct_change().plot(ax=ax2, title='–ú–µ—Å—è—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (%)')
    ax2.axhline(0, color='grey', linestyle='--')
    for ax in [ax1, ax2]:
        ax.grid(True)
    plt.tight_layout()
    st.pyplot(fig1)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏ —Å –ª–∞–≥–∞–º–∏
    for lag in range(0, max_lag + 1):
        df_shifted = pd.DataFrame({
            'CPI_change': df_filtered['CPI'].pct_change(),
            'Oil_lagged': df_filtered['Oil'].pct_change().shift(lag)
        }).dropna()
        
        if len(df_shifted) >= 2:
            corr_lag, p_value_lag = stats.pearsonr(df_shifted['Oil_lagged'], df_shifted['CPI_change'])
            r_squared_lag = corr_lag**2
            
            fig2 = plt.figure(figsize=(10, 6))
            sns.regplot(
                x='Oil_lagged', y='CPI_change', data=df_shifted,
                scatter_kws={'alpha': 0.3, 'color': 'blue'},
                line_kws={'color': 'red', 'lw': 2},
                ci=confidence_level,
                label=f'R¬≤={r_squared_lag:.2f}'
            )
            
            sns.regplot(
                x='Oil_lagged', y='CPI_change', data=df_shifted,
                scatter=False,
                line_kws={'color': 'green', 'lw': 1, 'linestyle': '--'},
                ci=confidence_level,
                truncate=False
            )
            
            plt.title(f'–í–ª–∏—è–Ω–∏–µ –Ω–µ—Ñ—Ç–∏ (–ª–∞–≥ {lag} –º–µ—Å—è—Ü) –Ω–∞ CPI\nR = {corr_lag:.2f}, R¬≤ = {r_squared_lag:.2f}')
            plt.xlabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ—Ñ—Ç–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü (%)')
            plt.ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ CPI (%)')
            plt.grid(True)
            plt.legend()
            st.pyplot(fig2)
            
            with st.expander(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–∞–≥–∞ {lag} –º–µ—Å—è—Ü(–µ–≤)"):
                st.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ (R): {corr_lag:.2f}")
                st.write(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤): {r_squared_lag:.2f}")
                st.write(f"p-value: {p_value_lag:.3f}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
create_plots()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞
def create_pdf():
    try:
        pdf = UnicodePDF()
        pdf.add_page()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font('DejaVu', 'B', 16)
        pdf.cell(0, 10, pdf.safe_text('Oil and CPI Analysis'), 0, 1, 'C')
        pdf.ln(10)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        pdf.set_font('DejaVu', '', 12)
        pdf.cell(0, 10, pdf.safe_text(f"Report generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"), 0, 1)
        pdf.cell(0, 10, pdf.safe_text(f"Analysis period: {start_date} - {df_filtered.index[-1].strftime('%Y-%m-%d')}"), 0, 1)
        pdf.ln(15)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        pdf.set_font('DejaVu', 'B', 14)
        pdf.cell(0, 10, pdf.safe_text("Key Metrics:"), 0, 1)
        pdf.set_font('DejaVu', '', 12)
        pdf.cell(0, 10, pdf.safe_text(f"Correlation (R): {corr:.2f}"), 0, 1)
        pdf.cell(0, 10, pdf.safe_text(f"R¬≤: {r_squared:.2f}"), 0, 1)
        pdf.cell(0, 10, pdf.safe_text(f"p-value: {p_value:.3f}"), 0, 1)
        pdf.ln(15)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        fig1, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))
        df_filtered.plot(ax=ax1, title='CPI and Oil (Nominal Values)')
        df_filtered.pct_change().plot(ax=ax2, title='Monthly Changes (%)')
        ax2.axhline(0, color='grey', linestyle='--')
        for ax in [ax1, ax2]:
            ax.grid(True)
        
        temp_plot1 = "temp_plot1.png"
        fig1.savefig(temp_plot1, bbox_inches='tight', dpi=150)
        plt.close(fig1)
        
        pdf.set_font('DejaVu', 'B', 14)
        pdf.cell(0, 10, pdf.safe_text("Analysis Charts:"), 0, 1)
        pdf.ln(5)
        pdf.image(temp_plot1, x=10, w=190)
        pdf.ln(10)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ —Å –ª–∞–≥–∞–º–∏
        for lag in range(0, max_lag + 1):
            df_shifted = pd.DataFrame({
                'CPI_change': df_filtered['CPI'].pct_change(),
                'Oil_lagged': df_filtered['Oil'].pct_change().shift(lag)
            }).dropna()
            
            if len(df_shifted) >= 2:
                corr_lag, p_value_lag = stats.pearsonr(df_shifted['Oil_lagged'], df_shifted['CPI_change'])
                r_squared_lag = corr_lag**2
                
                fig2 = plt.figure(figsize=(10, 8))
                sns.regplot(
                    x='Oil_lagged', y='CPI_change', data=df_shifted,
                    scatter_kws={'alpha': 0.3, 'color': 'blue'},
                    line_kws={'color': 'red', 'lw': 2},
                    ci=confidence_level,
                    label=f'R¬≤={r_squared_lag:.2f}'
                )
                
                sns.regplot(
                    x='Oil_lagged', y='CPI_change', data=df_shifted,
                    scatter=False,
                    line_kws={'color': 'green', 'lw': 1, 'linestyle': '--'},
                    ci=confidence_level,
                    truncate=False
                )
                
                plt.title(f'Oil impact (lag {lag} month) on CPI\nR = {corr_lag:.2f}, R¬≤ = {r_squared_lag:.2f}')
                plt.xlabel('Oil price change from previous month (%)')
                plt.ylabel('CPI change (%)')
                plt.grid(True)
                plt.legend()
                
                temp_plot_lag = f"temp_plot_lag{lag}.png"
                fig2.savefig(temp_plot_lag, bbox_inches='tight', dpi=150)
                plt.close(fig2)
                
                pdf.add_page()  # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∞–≥–∞
                pdf.image(temp_plot_lag, x=10, w=190)
                pdf.ln(10)
                
                pdf.set_font('DejaVu', 'B', 12)
                pdf.cell(0, 10, pdf.safe_text(f"Analysis with {lag} month lag:"), 0, 1)
                pdf.set_font('DejaVu', '', 12)
                pdf.cell(0, 10, pdf.safe_text(f"Correlation coefficient (R): {corr_lag:.2f}"), 0, 1)
                pdf.cell(0, 10, pdf.safe_text(f"R¬≤: {r_squared_lag:.2f}"), 0, 1)
                pdf.cell(0, 10, pdf.safe_text(f"p-value: {p_value_lag:.3f}"), 0, 1)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for filename in [temp_plot1] + [f"temp_plot_lag{i}.png" for i in range(max_lag + 1)]:
            if os.path.exists(filename):
                os.remove(filename)
        
        return pdf
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
        return None

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
        pdf = create_pdf()
        
        if pdf is not None:
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                    pdf_output = pdf.output(dest='S')
                    tmp.write(pdf_output.encode('latin1', 'replace'))
                    tmp_path = tmp.name
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                with open(tmp_path, 'rb') as f:
                    pdf_bytes = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0)
                if os.path.getsize(tmp_path) > 0:
                    st.success("PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                        data=pdf_bytes,
                        file_name=f"oil_cpi_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                        mime="application/pdf",
                        key="unique_download_button"
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    st.info(f"–†–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞: {len(pdf_bytes)/1024:.2f} KB")
                else:
                    st.error("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π PDF —Ñ–∞–π–ª")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(tmp_path)
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: {str(e)}")
                if 'tmp_path' in locals() and os.path.exists(tmp_path):
                    os.unlink(tmp_path)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
st.subheader("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
st.dataframe(df_filtered.style.format({
    "CPI": "{:.2f}",
    "Oil": "{:.2f}"
}))

